@startuml

actor User order 10
participant TestCase order 30
participant GenerateCaseData order 40
participant ExcelDataManager order 50
participant SignalDataManager order 60
participant "mAllCaseJson" as QJsonObject order 70
participant CaseDataWriter order 80
participant Python order 90

== Case Generation ==

User -> TestCase : click generate botton
activate TestCase
TestCase -> GenerateCaseData : excuteGenerateCaseData()
deactivate TestCase

activate GenerateCaseData
GenerateCaseData -> GenerateCaseData : reset internal state
GenerateCaseData -> ExcelDataManager : reloadExcelData()

loop for each sheet
    GenerateCaseData -> ExcelDataManager : isTCNameDataList()
    ExcelDataManager --> GenerateCaseData : return QStringList<TCName>
    GenerateCaseData -> ExcelDataManager : isGenTypeData()
    ExcelDataManager --> GenerateCaseData : return genType
    GenerateCaseData -> ExcelDataManager : isVehicleTypeData()
    ExcelDataManager --> GenerateCaseData : return vehicleType

    loop for each TCName
        GenerateCaseData -> ExcelDataManager : isResultDataList()
        ExcelDataManager --> GenerateCaseData : return QStringList<Result>

        loop for each Result
            GenerateCaseData -> ExcelDataManager : isCaseDataList()
            ExcelDataManager --> GenerateCaseData : return QStringList<Case>

            loop for each Case
                GenerateCaseData -> ExcelDataManager : isInputDataList()
                ExcelDataManager --> GenerateCaseData : return all case signal info for TC name
                GenerateCaseData -> SignalDataManager : isTestCaseInputSignalDataInfo()
                SignalDataManager --> GenerateCaseData : return signal names and values for Case

                GenerateCaseData -> GenerateCaseData : getSignalInfoString()
                GenerateCaseData -> Python : callPython() with SignalInfoString
                activate Python
                Python -> Python : run.py + signal string
                activate Python
                alt
                    note left of Python
                        Combinations of valid data from SignalInfoString signals are generated.
                        Cases = {
                            "0x1, 0x1, 0x1",
                            ...
                        }
                    end note
                end
                deactivate Python
                Python -> Python : generate JSON
                Python --> GenerateCaseData : return case JSON
                deactivate Python

                GenerateCaseData -> GenerateCaseData : appendCase()
                activate GenerateCaseData
                GenerateCaseData -> GenerateCaseData : getCaseInfoJson(genType)
                activate GenerateCaseData
                GenerateCaseData -> QJsonObject : get names and values of input signals for Case
                QJsonObject --> GenerateCaseData : return list of input siganls
                alt genType == Default
                    note right of GenerateCaseData
                        list of input siganls 에서 valid, invalid data 추출 후,
                        invalid data(precondition) 에서 valid data(input) 로 trigger 하는 tc 생성
                        Cases = {
                            "0x0, 0x1, 0x1, => Input_A: 0x1": "1",
                            "0x2, 0x1, 0x1, => Input_A: 0x1": "1",
                            ...
                        }
                    end note
                end
                deactivate GenerateCaseData
                GenerateCaseData -> GenerateCaseData : appendCaseJson(mAllCaseJson)
                GenerateCaseData -> GenerateCaseData : appendCaseJson(mIntermediateDefaultJson)
                deactivate GenerateCaseData
            end
        end
    end
end

GenerateCaseData -> ExcelDataManager : isManualDataList()
ExcelDataManager --> GenerateCaseData : return QList<ManualData>

GenerateCaseData -> CaseDataWriter : genTestCaseFile(mAllCaseJson, count)
activate CaseDataWriter
CaseDataWriter -> CaseDataWriter : write JSON to file
deactivate CaseDataWriter

GenerateCaseData -> GenerateCaseData : saveHistory()
deactivate GenerateCaseData

@enduml