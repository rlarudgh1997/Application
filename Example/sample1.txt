파이썬에서 엑셀 내용을 파싱하고 빈 셀을 병합하는 방법은 다양한 라이브러리를 활용하여 구현할 수 있습니다.
예를 들어, openpyxl 라이브러리를 사용하여 엑셀 파일을 조작할 수 있습니다.
다음은 엑셀 파일을 파싱하고 빈 셀을 병합하는 예제 코드입니다.




[openpyxl 라이브러리를 설치]

	pip install openpyxl




from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment

def merge_empty_cells(file_path, sheet_name):
    # 엑셀 파일 로드
    wb = load_workbook(file_path)
    sheet = wb[sheet_name]

    # 빈 셀을 저장할 리스트 생성
    empty_cells = []

    # 엑셀 파일 순회하며 빈 셀 위치 파악
    for row in sheet.iter_rows():
        for cell in row:
            if cell.value is None:
                empty_cells.append(cell.coordinate)

    # 빈 셀 병합
    for empty_cell in empty_cells:
        start_cell, end_cell = empty_cell.split(':')
        start_col = get_column_letter(sheet[start_cell].column)
        end_col = get_column_letter(sheet[end_cell].column)

        merge_range = f'{start_col}{start_cell.row}:{end_col}{end_cell.row}'
        sheet.merge_cells(merge_range)

        # 병합된 셀 가운데 정렬
        merged_cell = sheet[start_cell]
        merged_cell.alignment = Alignment(horizontal='center', vertical='center')

    # 엑셀 파일 저장
    wb.save(file_path)

# 예제 실행

file_path = 'example.xlsx'  # 엑셀 파일 경로
sheet_name = 'Sheet1'  # 시트 이름
merge_empty_cells(file_path, sheet_name)





위 코드는 merge_empty_cells 함수를 정의하고, 엑셀 파일을 로드한 뒤 빈 셀을 찾아서 리스트에 저장합니다.
그런 다음 빈 셀을 순회하며 해당 셀들을 병합하고 병합된 셀을 가운데 정렬합니다. 마지막으로 엑셀 파일을 저장합니다.
함수를 호출할 때는 엑셀 파일의 경로와 시트 이름을 제공하면 됩니다.
위 예제에서는 example.xlsx 파일의 Sheet1 시트를 대상으로 합니다. 적절히 파일 경로와 시트 이름을 수정하여 사용해주세요.
이 코드를 실행하면 지정한 엑셀 파일에서 빈 셀이 병합되고 가운데 정렬된 것을 확인할 수 있습니다.
